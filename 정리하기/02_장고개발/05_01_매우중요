""" 가장 중요한 사항 """

장고에서 만든 서버를 기준으로 

"localhost:8000/pybo/" 를 실행하면 그 주소가 제일 처음 "config.urls.py" 로 간다. 

Ex)
  from django.contrib import admin
  from django.urls import path, include


  urlpatterns = [
      path('admin/', admin.site.urls),
      path('pybo/', include('pybo.urls')), 
  ]

여기에 적혀 있는 path 에 있는 include 를 따라서 'pybo.urls' 로 들어가게 된다. 

Ex) 
  from django.urls import path
  from . import views

  urlpatterns = [
      path('', views.index),
  ]


그 안에 들어있는 path에 적혀져있는 "pyby/함수" 를 찾기 위해 "pybo/views.py" 로 들어간다.

Ex)
  from django.shortcuts import render
  from .models import Question

  def index(request) :
    Apple = Question.objects.order_by("create_date")
    context = {'Apple': Apple}
    return render(request, 'pybo/question_list.html', context) 

여기서 있는 index 함수를 읽어 들이면서 "Question.objects" 에 있는 값들에 따라서 "pybo/models.py" 에 들어간다.

그리고 "pybo/models.py" 에서 만들고 "makemigrations" 해서 새롭게 생긴 디렉터리 파일 안에 있는 "0001_initial.py" 값들을 불러오게 되고, "db.sqlite3" 에 저장되어 있는 값들을 불러온다. 그리고 그 값들이 "index" 함수에서 "context" 파일에 의해서 다시 한 번 값이 변수로 저장되어지고, return 을 실행해서 "pybo/question_list.html" 파일에 "context" 파일을 전송해주게 된다.

여기서 Apple 은 변수명으로 지정되어 있고 그 변수 값으로 "Question.objects.order_by('create_date')"
으로 설정되어 지며 , 그 값들이 "context" 에 저장되어 지고 다시 "context" 가 "render" 함수에 저장되어지며 리턴하게 된다.

여기서 의문은 왜 "context" 함수가 필요한지 이다.

Ex)
  from django.shortcuts import render
  from .models import Question

  def index(request) :
    Apple = Question.objects.order_by("create_date")
    return render(request, 'pybo/question_list.html', Apple) 

"context" 함수로 한 번 더 치환하지 않고 바로 변수 값을 넣더라도 홈페이지에 오류가 발생하지는 않는다.

Ex)
  {% if Apple %}
  <ul>
    {% for question in Apple %}
    <li>
      <a href="pybo/{{ question.id }}">{{question.subject}}</a>
      {% endfor %}
    </li>
  </ul>
  {% else %}
  <p>질문이 없습니다.</p>
  {% endif %}

그리고 "pybo/question_list.html" 파일에 설정되어 있는 값들이 다시 사용이 되어 지며 인터넷에 출력이 되게 된다.

if Apple 이라는 값은 def index 함수에서 설정된 그 값으로 불러온 값들이 있다면 이라는 뜻이며, 그 값은 저장되어진 값에 있기 때문에, if 문이 실행이 된다.

그 뒤로 for question in Apple 이라는 값을 썻는데, question 은 변수 값에 불과하며, 메소드 오버라이딩을 했을 뿐이다.

index 함수에 들어가면서 정의된 Apple 안에 Question 이라는 값들이 저장되어 지며, python 의 for 문에 따라서 Apple 에 저장되어져 있는 Question.objects 라는 리스트 안에 1번과 2번값이 반복문을 통해서 나왔을 뿐이며,

밑에 있는 href = "pybo/{{question.id}}" 또한 위에서 정의한 for 문에 들어간 값이 index 값에 의해서 만들어진 Apple 의 값들이 하나씩 들어오며, 그 것들의 id 값에 따라서 뒤에 나오는 {{question.subject}} 값들이 불려나와 진것이다.

Ex)
  {% if Apple %}
  <ul>
    {% for A in Apple %}
    <li>
      <a href="pybo/{{ A.id }}">{{A.subject}}</a>
      {% endfor %}
    </li>
  </ul>
  {% else %}
  <p>질문이 없습니다.</p>
  {% endif %}

그렇기 때문에, 그 안에 저장되어 있는 값이 달라진다고 하더라도 홈페이지는 정상적으로 동작을 한다.


Ex)
  def detail(request, question_id) :
    question = Question.objects.get(id=question_id)
    context = {'question': question}
    return render(request, 'pybo/question_detail.html', context)

"views.py" 파일안에서 만들어진 함수 "detail" 을 살펴보면 함수에서 정의된 request와 question_id 는 함수 안에서 바로 사용되어지며, 그 값이 render되서 "pybo/question_detail.html" 로 들어가게 된다.

"render" 함수는 파이썬 데이터를 템플릿에 적용하여 HTML로 반환하는 함수이다.

그러면 이제 이 명령을 풀어서 쓰면

    return render(request, 'pybo/question_detail.html', context)

"render" context 파일을 'pybo/question_detail.html' 이 템플릿으로 반환한다.

"render" 함수에 따라서 (request(요청한다), "템플릿 파일" , 파이썬파일)