/ 데이터 저장 /

1. 답변등록 폼
2. URL 매핑
3. 뷰 함수
4. 답변 저장
5. 답변조회


/ -- 1 . 답변등록 폼 /

질문 상세 템플릿에 다음처럼 답변을 저장할 수 있는 폼을 추가하자

"pybo/question_list.html"

Ex)
  <h1>{{ question.subject }}</h1>
  <div>
      {{ question.content }}
  </div>
  <form action="{% url 'pybo:answer_create' question.id %}" method="post">
  {% csrf_token %}
  <textarea name="content" id="content" rows="15"></textarea>
  <input type="submit" value="답변등록">
  </form>

답변내용을 달 수 있는 텍트트창과 답변을 저장할 수 있는 "답변등록" 버튼을 추가했다. 답변 저장을 위한 URL은 form 태그의 action 속성에 {% url 'pybo/answer_create' question.id %} 로 지정했다.

"csrf_token" 이란 웹사이트 취약점 공격을 방지를 위해 사용하는 기술이다. 장고가 csrf 토큰 값을 세션을 통해 발행하고 웹 페이지에서는 폼 전송시에 해당 토근을 함께 전송하여 실제 웹페이지에서 작성된 데이터가 전달되는지를 검증하는 기술이다.

이를 사용하기 위해서는 "CsrfViewMiddleware" 가 필요한데 이 미들웨어는 setting.py 의 MIDDLEWARE 항목에 디폴트로 추가되어 있으므로 별도의 설정은 필요 없다.

"config.setting.py"

Ex)
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


/ -- 2 . URL 매핑 /

이제 "answer_create" 를 위한 매핑을 설정하자

"pybo/urls.py"

Ex)
  from django.urls import path
  from . import views

  app_name = 'pybo'

  urlpatterns = [
      path('', views.index, name= 'index'),
      path('<int:question_id>/', views.detail, name = 'detail'),
      path('answer/create/<int:question_id>/', views.answer_create, name = 'answer_create')
  ]


"answer_create" 별칭에 해당하는 URL 매핑 규칙을 등록했다.


이제 "answer/create/<int:question_id>/" 와 같은 페이지를 요청하면 URL 매핑 규칙에 의해 "views.answer_create" 함수가 호출될 것이다. 



/ -- 3 . view 함수 /

이제 URL 매핑 규칙에 정의된 views.answer_create 함수를 pybo/views.py 파일에 만들자

"pybo/views.py"

Ex)
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from .models import Question, answer

def answer_create(request, question_id) :
  question = get_object_or_404(Question, pk=question_id)
  answer = Answer(question = question, content = request.POST.get('content'), create_date = timezone.now())
  answer.save()
  return redriect('pybo:detail', question_id = question.id)

Ex)
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from .models import Question, Answer

def answer_create(request, question_id):
  question = get_object_or_404(Question, question_id)
  question.answer_set.create(content = request.POST.get('content'), create_date = timezone.now())
  return redirect('pybo:detial', question_id = question.id)

두 가지 예제 모두 사용해도 결과는 똑같다.


/ -- 4 . 답변저장 / 

텍스트창이 이제 만들어 졌다.

그런데 아무 값이나 입력하고 답변을 등록해도 화면에는 아무런 변화가 없을 것이다. 왜냐하면 아직 등록된 답변을 표시하는 기능을 템플릿에 추가하지 않았기 때문이다.


/ -- 5 . 답변조회 /

등록된 답변을 질문 상세 화면에 표시하려면 다음과 같이 템플릿을 수정하자

"pybo/question_detail.html"


Ex)
  <h1>{{ question.subject }}</h1>
  <div>
      {{ question.content }}
  </div>
  <h5>{{ question.answer_set.count }}개의 답변이 있습니다.</h5>
  <div>
      <ul>
      {% for answer in question.answer_set.all %}
          <li>{{ answer.content }}</li>
      {% endfor %}
      </ul>
  </div>
  <form action="{% url 'pybo:answer_create' question.id %}" method="post">
  {% csrf_token %}
  <textarea name="content" id="content" rows="15"></textarea>
  <input type="submit" value="답변등록">
  </form>
