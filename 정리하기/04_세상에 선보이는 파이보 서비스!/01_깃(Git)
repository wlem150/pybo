/ 깃(Git) /

코드를 작성하다 보면 수정과 삭제가 빈번하게 발생한다. 때로는 과거에 삭제된 부분을 되살리고 싶을 때도 있고 때로는 어떤 부분을 수정했는지 확인하고 싶은 경우도 생긴다. 또 동일한 소스코드를 여러명이 수정하는 경우도 생기게 된다. 이럴경우 누가 어떤 부분을 왜 수정했는지 알고 싶을 수도 있을 것이다.

버전관리 시스템을 도입하면 이러한 모든 상황을 쉽게 관리할 수 있다. 이번 장에서는 버전 관리시스템 중에서도 가장 유명한 깃(Git)을 설치하고 사용해 볼 것이다.

1. 깃 설치
2. 파이보에 깃 적용하기

/ -- 1. 깃 설치 /

이미 깃 설치되어 있다.

/ -- 2. 파이보에 깃 적용하기 /

이제 파이보에 깃을 사용할 준비가 되었다. 가장 먼저 할 일은 "저장소(repository)를 만드는 것"이다. projects/mysite 디렉터리에서 "git init 명령"을 실행하자.

Ex)
(mysite) c:\projects\mysite>"git init"
Initialized empty Git repository in C:/projects/mysite/.git/




/ 2.1 git status /

그리고 다음처럼 projects/mysite 디렉터리에서 git status 명령을 실행해 보자.

터미널을 열고 "git status" 를 입력하자 

git status 명령은 현재 저장소의 상태를 출력해 준다. 아직 관리되지 않고 있는 파일(Untracked files)들을 보여주고 git add 명령을 이용하여 관리할 파일들을 추가하라고 알려준다.




/ 2.2 gitignore /

하지만 git add 명령 수행 전에 깃으로 관리해야 할 파일들에 대한 고민이 필요하다. 예를 들어 파이보를 만들며 직접 작성한 mysite, pybo 디렉터리 등은 깃으로 관리해야 할 대상이 맞지만 .idea나 db.sqlite3 파일은 사용자별, 시스템별로 달라지는 파일이므로 깃으로 관리하면 안 된다.

.idea는 사용자 설정을 저장하는 파이참 전용 파일이고, db.sqlite3 파일은 SQLite의 데이터베이스 파일이다.

예를 들어 여러 명이 같은 저장소에서 작업할 때 .idea 파일을 누군가 변경한다면 내가 설정했던 파이참 설정 내용이 다른 사람의 것으로 변경되는 문제가 발생한다. 이런 문제를 방지하기 위해 ".gitignore" 파일을 작성하여 깃으로 관리하지 않을 대상을 기술해 주어야 한다.

"projects/mysite/.gitignore"

Ex)
db.sqlite3
*.pyc
__pycache__

다음 내용을 추가 하자

여기에 추가한 파일들이 회색으로 변하는 것을 확인할 수 있다.




/ 2.3 git add /

이제 다음처럼 add 명령을 수행해 보자.

Ex)
(mysite) c:\projects\mysite>git add *
warning: LF will be replaced by CRLF in static/bootstrap.min.css.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in static/bootstrap.min.js.
The file will have its original line endings in your working directory


현재 디렉터리 하위의 모든 파일을 추가하기 위해 git add *를 수행했다. 위의 경고 문구는 "줄바꿈 문자를 \n에서 \r\n으로 강제로 바꾼다"는 의미이므로 무시해도 된다.

다시 git status 명령을 수행해 보자.








