/ 깃허브 /

깃을 사용하여 로컬 저장소를 생성하고 소스 코드를 관리할 수 있게 되었다. 하지만 프로젝트는 보통 여럿이 진행하므로 원격 저장소가 반드시 필요하다. 물론 개인 프로젝트라 하더라도 코드의 유실을 방지하려면 원격 저장소는 필수이다.

"원격 저장소는 컴퓨터에 있는 로컬 저장소가 아닌 인터넷의 다른 공간에 있는 저장소를 말한다."

여기서는 깃을 지원하는 원격 저장소 중에서 가장 유명한 깃허브(Github)를 어떻게 사용하는지 알아본다. 깃허브는 마이크로소프트에서 운영하는 깃 지원 호스팅 서비스이다. 현재 사용자가 4,000만명 이상이고 4,400만 개가 넘는 신규 저장소가 있다고 하니 그 인기가 어마어마하다. 깃허브는 오픈소스 지원 정책에 따라 무료로 사용할 수 있다.


1. 깃허브 가입
2. 깃허브 저장소 생성
3. 깃허브 연결


/ -- 1. 깃허브 가입 /

만들어 놓았다.


/ -- 2. 깃허브 저장소 생성 /

깃허브를 원격 저장소로 사용하려면 파이보의 로컬 저장소와 깃허브의 원격 저장소를 연결해야 한다 .

다음과 같이 따라해 보자.

깃허브에 로그인 하고 <Create repository>를 누르자.


이미 깃허브를 사용한다면 'Repositories'의 <New>를 누르자.


그러면 원격 저장소를 생성하는 다음의 화면이 나타난다.


'Repository name'에 'pybo'를 입력하고 <Create repository>를 눌러 원격 저장소를 생성하자.

그러면 원격 저장소의 URL을 확인하는 화면이 나타난다.


이 URL은 로컬 저장소와 연결할 때 사용되므로 기억하고 있어야 한다.


"https://github.com/wlem150/pybo.git"


/ -- 3. 깃허브 연결 /

이제 깃과 깃허브가 준비되었으므로 로컬저장소와 원격저장소를 연결해 보자.

C:/projects/mysite 디렉터리에서 "git remote add origin" <원격 저장소 URL> 명령을 수행하자.

Ex)
  (mysite) c:\projects\mysite>git remote add origin https://github.com/wlem150/pybo.git


이어서 "git push -u origin main" 명령으로 로컬 저장소의 내용을 원격 저장소에 저장하자.


Ex)
  (mysite) c:\projects\mysite>git push -u origin main




만약 다음과 같은 오류가 발생한다면,

error: src refspec main does not match any
error: failed to push some refs to 'https://github.com/wlem150/pybo.git'

이렇게 해결하자 
해당 에러는 깃허브에서 pull 없이 push할 경우 기존 내용을 삭제하거나 하는 문제가 생길 수 있기 때문에, 이런 문제를 피하고자 에러 메세지를 발생시키는 것. 해당 에러가 발생하면 아래의 순서대로 다시 명령어를 입력한다. 

새로운 깃 리파지토리를 init하고, 다시 push 하는 방법이다.

git init

git add .

git commit -m "message"


